{"ast":null,"code":"import { ADD_USER, DELETE_USER, LOGIN_FAILURE, LOGIN_SUCCESS, USER_DETAIL, LOGOUT_SUCCESS } from \"../actions/types\";\nconst initialState = {\n  users: [{\n    id: 1,\n    name: \"Lesley\",\n    email: \"lesleyc@bu.edu\",\n    password: \"password\"\n  }, {\n    id: 2,\n    name: \"Ryan\",\n    email: \"ryan@bu.edu\",\n    password: \"password\"\n  }, {\n    id: 3,\n    name: \"Robert\",\n    email: \"robert@bu.edu\",\n    password: \"password\"\n  }]\n};\n/**********************************************\n * User Reducer\n * ==================================\n * 1. ADD USER\n * - Connected to SignupPage\n * - Pass in name, email and password\n *\n * 2.\n ***********************************************/\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_USER:\n      return {\n        isAuthenticated: false,\n        users: [...state, { ...action.payload,\n          id: generateID(state)\n        }]\n      };\n\n    case DELETE_USER:\n      let allUsers = state.users.filter(user => user.id !== action.payload);\n      return {\n        isAuthenticated: false,\n        users: allUsers\n      };\n\n    case LOGIN_FAILURE:\n      return {\n        state\n      };\n\n    case LOGIN_SUCCESS:\n      return {\n        isAuthenticated: true\n      };\n\n    case USER_DETAIL:\n      return { ...state,\n        data: action.info,\n        isAuthenticated: true\n      };\n\n    case LOGOUT_SUCCESS:\n      return { ...state,\n        isAuthenticated: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nlet generateID = users => {\n  let lastId = 0;\n\n  if (users.length > 0) {\n    lastId = users[users.length - 1].id;\n  }\n\n  return ++lastId;\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/Users/lesleycheung/Desktop/current/Work/capstone/frontend/src/redux/reducers/userReducer.js"],"names":["ADD_USER","DELETE_USER","LOGIN_FAILURE","LOGIN_SUCCESS","USER_DETAIL","LOGOUT_SUCCESS","initialState","users","id","name","email","password","userReducer","state","action","type","isAuthenticated","payload","generateID","allUsers","filter","user","data","info","lastId","length"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,WALF,EAMEC,cANF,QAOO,kBAPP;AASA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CACL;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,KAAK,EAAE,gBAHT;AAIEC,IAAAA,QAAQ,EAAE;AAJZ,GADK,EAOL;AACEH,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,KAAK,EAAE,aAHT;AAIEC,IAAAA,QAAQ,EAAE;AAJZ,GAPK,EAaL;AACEH,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,KAAK,EAAE,eAHT;AAIEC,IAAAA,QAAQ,EAAE;AAJZ,GAbK;AADY,CAArB;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,QAAL;AACE,aAAO;AACLgB,QAAAA,eAAe,EAAE,KADZ;AAELT,QAAAA,KAAK,EAAE,CACL,GAAGM,KADE,EAEL,EAAE,GAAGC,MAAM,CAACG,OAAZ;AAAqBT,UAAAA,EAAE,EAAEU,UAAU,CAACL,KAAD;AAAnC,SAFK;AAFF,OAAP;;AAOF,SAAKZ,WAAL;AACE,UAAIkB,QAAQ,GAAGN,KAAK,CAACN,KAAN,CAAYa,MAAZ,CACZC,IAAD,IAAUA,IAAI,CAACb,EAAL,KAAYM,MAAM,CAACG,OADhB,CAAf;AAGA,aAAO;AACLD,QAAAA,eAAe,EAAE,KADZ;AAELT,QAAAA,KAAK,EAAEY;AAFF,OAAP;;AAIF,SAAKjB,aAAL;AACE,aAAO;AAAEW,QAAAA;AAAF,OAAP;;AACF,SAAKV,aAAL;AACE,aAAO;AACLa,QAAAA,eAAe,EAAE;AADZ,OAAP;;AAGF,SAAKZ,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELS,QAAAA,IAAI,EAAER,MAAM,CAACS,IAFR;AAGLP,QAAAA,eAAe,EAAE;AAHZ,OAAP;;AAKF,SAAKX,cAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELG,QAAAA,eAAe,EAAE;AAFZ,OAAP;;AAIF;AACE,aAAOH,KAAP;AAnCJ;AAqCD,CAtCD;;AAuCA,IAAIK,UAAU,GAAIX,KAAD,IAAW;AAC1B,MAAIiB,MAAM,GAAG,CAAb;;AACA,MAAIjB,KAAK,CAACkB,MAAN,GAAe,CAAnB,EAAsB;AACpBD,IAAAA,MAAM,GAAGjB,KAAK,CAACA,KAAK,CAACkB,MAAN,GAAe,CAAhB,CAAL,CAAwBjB,EAAjC;AACD;;AACD,SAAO,EAAEgB,MAAT;AACD,CAND;;AAQA,eAAeZ,WAAf","sourcesContent":["import {\n  ADD_USER,\n  DELETE_USER,\n  LOGIN_FAILURE,\n  LOGIN_SUCCESS,\n  USER_DETAIL,\n  LOGOUT_SUCCESS,\n} from \"../actions/types\";\n\nconst initialState = {\n  users: [\n    {\n      id: 1,\n      name: \"Lesley\",\n      email: \"lesleyc@bu.edu\",\n      password: \"password\",\n    },\n    {\n      id: 2,\n      name: \"Ryan\",\n      email: \"ryan@bu.edu\",\n      password: \"password\",\n    },\n    {\n      id: 3,\n      name: \"Robert\",\n      email: \"robert@bu.edu\",\n      password: \"password\",\n    },\n  ],\n};\n/**********************************************\n * User Reducer\n * ==================================\n * 1. ADD USER\n * - Connected to SignupPage\n * - Pass in name, email and password\n *\n * 2.\n ***********************************************/\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_USER:\n      return {\n        isAuthenticated: false,\n        users: [\n          ...state,\n          { ...action.payload, id: generateID(state) },\n        ],\n      };\n    case DELETE_USER:\n      let allUsers = state.users.filter(\n        (user) => user.id !== action.payload\n      );\n      return {\n        isAuthenticated: false,\n        users: allUsers,\n      };\n    case LOGIN_FAILURE:\n      return { state };\n    case LOGIN_SUCCESS:\n      return {\n        isAuthenticated: true,\n      };\n    case USER_DETAIL:\n      return {\n        ...state,\n        data: action.info,\n        isAuthenticated: true,\n      };\n    case LOGOUT_SUCCESS:\n      return {\n        ...state,\n        isAuthenticated: false,\n      };\n    default:\n      return state;\n  }\n};\nlet generateID = (users) => {\n  let lastId = 0;\n  if (users.length > 0) {\n    lastId = users[users.length - 1].id;\n  }\n  return ++lastId;\n};\n\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}