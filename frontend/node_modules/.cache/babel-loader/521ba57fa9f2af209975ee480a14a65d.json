{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/lesleycheung/Desktop/current/Work/capstone/src/components/pages/CalendarPage/CalendarPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from \"react\";\nimport { format } from \"date-fns\";\nimport { enGB } from \"date-fns/locale\";\nimport { getDay } from \"date-fns\";\nimport \"./calendar.css\";\nimport { DateRangePickerCalendar, START_DATE } from \"react-nice-dates\";\nimport \"react-nice-dates/build/style.css\"; // Event Calendar Imports\n\nimport FullCalendar, { formatDate } from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nconst modifiers = {\n  //   disabled: (date) => getDay(date) === 6, // Disables Saturdays\n  highlight: date => getDay(date) === 2 // Highlights Tuesdays\n\n};\nconst modifiersClassNames = {\n  highlight: \"-highlight\"\n};\n\nfunction DateRangePickerCalendarExample() {\n  _s();\n\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n  const [focus, setFocus] = useState(START_DATE);\n\n  const handleFocusChange = newFocus => {\n    setFocus(newFocus || START_DATE);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DateRangePickerCalendar, {\n      startDate: startDate,\n      endDate: endDate,\n      focus: focus,\n      onStartDateChange: setStartDate,\n      onEndDateChange: setEndDate,\n      onFocusChange: handleFocusChange,\n      locale: enGB,\n      modifiers: modifiers,\n      modifiersClassNames: modifiersClassNames\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected start date:\", \" \", startDate ? format(startDate, \"dd MMM yyyy\", {\n        locale: enGB\n      }) : \"none\", \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected end date:\", \" \", endDate ? format(endDate, \"dd MMM yyyy\", {\n        locale: enGB\n      }) : \"none\", \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DateRangePickerCalendarExample, \"DY+1BNZw9wLLmYg9flPC4Oq/hSA=\");\n\n_c = DateRangePickerCalendarExample;\nlet eventGuid = 0;\nlet todayStr = new Date().toISOString().replace(/T.*$/, \"\"); // YYYY-MM-DD of today\n\nconst INITIAL_EVENTS = [{\n  id: createEventId(),\n  title: \"All-day event\",\n  start: todayStr\n}, {\n  id: createEventId(),\n  title: \"Timed event\",\n  start: todayStr + \"T12:00:00\"\n}];\n\nfunction createEventId() {\n  return String(eventGuid++);\n}\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: eventInfo.timeText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: eventInfo.event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nfunction renderSidebarEvent(event) {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: formatDate(event.start, {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\"\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, event.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\nclass EventCalendar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weekendsVisible: true,\n      currentEvents: []\n    };\n\n    this.handleWeekendsToggle = () => {\n      this.setState({\n        weekendsVisible: !this.state.weekendsVisible\n      });\n    };\n\n    this.handleDateSelect = selectInfo => {\n      let title = prompt(\"Please enter a new title for your event\");\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n\n    this.handleEventClick = clickInfo => {\n      if (alert(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove();\n      }\n    };\n\n    this.handleEvents = events => {\n      this.setState({\n        currentEvents: events\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n        headerToolbar: {\n          left: \"prev,next today\",\n          center: \"title\",\n          right: \"dayGridMonth,timeGridWeek,timeGridDay\"\n        },\n        initialView: \"dayGridMonth\",\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        weekends: this.state.weekendsVisible,\n        initialEvents: INITIAL_EVENTS // alternatively, use the `events` setting to fetch from a feed\n        ,\n        select: this.handleDateSelect,\n        eventContent: renderEventContent // custom render function\n        ,\n        eventClick: this.handleEventClick,\n        eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n        /* you can update a remote database when these fire:\n          eventAdd={function(){}}\n          eventChange={function(){}}\n          eventRemove={function(){}}\n          */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default class CalendarPage extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"This page would highlight all the ongoing projects the user is currently going through\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(DateRangePickerCalendarExample, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EventCalendar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DateRangePickerCalendarExample\");","map":{"version":3,"sources":["/Users/lesleycheung/Desktop/current/Work/capstone/src/components/pages/CalendarPage/CalendarPage.js"],"names":["React","Component","useState","format","enGB","getDay","DateRangePickerCalendar","START_DATE","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","modifiers","highlight","date","modifiersClassNames","DateRangePickerCalendarExample","startDate","setStartDate","endDate","setEndDate","focus","setFocus","handleFocusChange","newFocus","locale","eventGuid","todayStr","Date","toISOString","replace","INITIAL_EVENTS","id","createEventId","title","start","String","renderEventContent","eventInfo","timeText","event","renderSidebarEvent","year","month","day","EventCalendar","state","weekendsVisible","currentEvents","handleWeekendsToggle","setState","handleDateSelect","selectInfo","prompt","calendarApi","view","calendar","unselect","addEvent","startStr","end","endStr","allDay","handleEventClick","clickInfo","alert","remove","handleEvents","events","render","left","center","right","CalendarPage"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport { format } from \"date-fns\";\nimport { enGB } from \"date-fns/locale\";\nimport { getDay } from \"date-fns\";\nimport \"./calendar.css\";\nimport {\n  DateRangePickerCalendar,\n  START_DATE,\n} from \"react-nice-dates\";\nimport \"react-nice-dates/build/style.css\";\n// Event Calendar Imports\nimport FullCalendar, {\n  formatDate,\n} from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nconst modifiers = {\n  //   disabled: (date) => getDay(date) === 6, // Disables Saturdays\n  highlight: (date) => getDay(date) === 2, // Highlights Tuesdays\n};\nconst modifiersClassNames = {\n  highlight: \"-highlight\",\n};\nfunction DateRangePickerCalendarExample() {\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n  const [focus, setFocus] = useState(START_DATE);\n  const handleFocusChange = (newFocus) => {\n    setFocus(newFocus || START_DATE);\n  };\n  return (\n    <div>\n      {/* <p>Currently selecting: {focus}.</p> */}\n      <DateRangePickerCalendar\n        startDate={startDate}\n        endDate={endDate}\n        focus={focus}\n        onStartDateChange={setStartDate}\n        onEndDateChange={setEndDate}\n        onFocusChange={handleFocusChange}\n        locale={enGB}\n        modifiers={modifiers}\n        modifiersClassNames={modifiersClassNames}\n      />\n      <p>\n        Selected start date:{\" \"}\n        {startDate\n          ? format(startDate, \"dd MMM yyyy\", {\n              locale: enGB,\n            })\n          : \"none\"}\n        .\n      </p>\n      <p>\n        Selected end date:{\" \"}\n        {endDate\n          ? format(endDate, \"dd MMM yyyy\", { locale: enGB })\n          : \"none\"}\n        .\n      </p>\n    </div>\n  );\n}\nlet eventGuid = 0;\nlet todayStr = new Date().toISOString().replace(/T.*$/, \"\"); // YYYY-MM-DD of today\n\nconst INITIAL_EVENTS = [\n  {\n    id: createEventId(),\n    title: \"All-day event\",\n    start: todayStr,\n  },\n  {\n    id: createEventId(),\n    title: \"Timed event\",\n    start: todayStr + \"T12:00:00\",\n  },\n];\n\nfunction createEventId() {\n  return String(eventGuid++);\n}\nfunction renderEventContent(eventInfo) {\n  return (\n    <>\n      <b>{eventInfo.timeText}</b>\n      <i>{eventInfo.event.title}</i>\n    </>\n  );\n}\n\nfunction renderSidebarEvent(event) {\n  return (\n    <li key={event.id}>\n      <b>\n        {formatDate(event.start, {\n          year: \"numeric\",\n          month: \"short\",\n          day: \"numeric\",\n        })}\n      </b>\n      <i>{event.title}</i>\n    </li>\n  );\n}\n\nclass EventCalendar extends React.Component {\n  state = {\n    weekendsVisible: true,\n    currentEvents: [],\n  };\n  handleWeekendsToggle = () => {\n    this.setState({\n      weekendsVisible: !this.state.weekendsVisible,\n    });\n  };\n  handleDateSelect = (selectInfo) => {\n    let title = prompt(\n      \"Please enter a new title for your event\"\n    );\n    let calendarApi = selectInfo.view.calendar;\n\n    calendarApi.unselect(); // clear date selection\n\n    if (title) {\n      calendarApi.addEvent({\n        id: createEventId(),\n        title,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay,\n      });\n    }\n  };\n  handleEventClick = (clickInfo) => {\n    if (\n      alert(\n        `Are you sure you want to delete the event '${clickInfo.event.title}'`\n      )\n    ) {\n      clickInfo.event.remove();\n    }\n  };\n\n  handleEvents = (events) => {\n    this.setState({\n      currentEvents: events,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {\" \"}\n        <FullCalendar\n          plugins={[\n            dayGridPlugin,\n            timeGridPlugin,\n            interactionPlugin,\n          ]}\n          headerToolbar={{\n            left: \"prev,next today\",\n            center: \"title\",\n            right: \"dayGridMonth,timeGridWeek,timeGridDay\",\n          }}\n          initialView=\"dayGridMonth\"\n          editable={true}\n          selectable={true}\n          selectMirror={true}\n          dayMaxEvents={true}\n          weekends={this.state.weekendsVisible}\n          initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n          select={this.handleDateSelect}\n          eventContent={renderEventContent} // custom render function\n          eventClick={this.handleEventClick}\n          eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n          /* you can update a remote database when these fire:\n            eventAdd={function(){}}\n            eventChange={function(){}}\n            eventRemove={function(){}}\n            */\n        />\n      </div>\n    );\n  }\n}\nexport default class CalendarPage extends React.Component {\n  render() {\n    return (\n      <div>\n        <p>\n          This page would highlight all the ongoing projects\n          the user is currently going through{\" \"}\n        </p>\n        <div className=\"justify-content-center\">\n          <DateRangePickerCalendarExample />\n          <EventCalendar />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}